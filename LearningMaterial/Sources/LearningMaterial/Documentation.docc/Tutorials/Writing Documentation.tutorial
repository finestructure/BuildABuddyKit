@Tutorial(time: 30) {
    @Intro(title: "Writing Documentation") {
        This tutorial will guide you through building the documentation, documenting the symbols of a type, and adding images and asides to the documentation.
    }
    
    @Section(title: "Building the documentation") {
        @ContentAndMedia {
            DocC documentation is built from your source code and optionally some Markdown files.
        }
        
        @Steps {
            @Step {
                Checkout the `step-1` branch in the Git repository.
                
                @Image(source: tutorial-git-step-1.png, alt: "Screenshot of Terminal showing the step-1 branch being checked out.")
            }
            
            @Step {
                Select Product > Build Documentation in the menu bar.
                
                > Tip: You can also press ⌃⇧⌘D to build the documentation.
                
                @Image(source: 01-writing-documentation-01-02.png, alt: "Screenshot of the menu bar with Product and Build Documentation highlighted.")
            }
            
            @Step {
                A window containing the documentation should appear. Select BuildABuddyKit under "Workspace Documentation" to view your documentation.
                
                > Tip: Spend a minute browsing the documentation. Notice that all the public types in the BuildABuddyKit package are included in the documentation but none of them are accomodated by text.  This documentation is similar to when Apple's documentation shows "No overview available".
                
                @Image(source: 01-writing-documentation-01-03.png, alt: "Screenshot of the window containing the documentation with the table of contents for BuildABuddyKit highlighted.")
            }
        }
    }
        
    @Section(title: "Documenting symbols") {
        @ContentAndMedia {
            We have built the documentation but it is lacking descriptions of symbols, such as types, properties, and functions.
            
            We can use a dialect of Markdown, _documentation markup_, to write our documentation. This dialect builds upon Markdown to add support for linking to symbols, asides, and much more.
            
            When building the documentation, the DocC compiler converts the Markdown into rich documentation.
            
            > Info: Do not worry. You will not have to document all types in BuildABuddyKit.
        }
            
        @Steps {
            @Step {
                Checkout the `step-2` branch in the Git repository.
                
                @Image(source: tutorial-git-step-2.png, alt: "Screenshot of Terminal showing the step-2 branch being checked out.")
            }

            @Step {
                Select BuddyRenderer.swift in the Project navigator.
                
                We will add documentation to the BuddyRenderer type. This type takes an instance of Buddy as input and outputs an image.
                                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-01.swift)
            }
            
            @Step {
                The first line in your documentation is treated as the summary which is shown below the type name. The summary should be kept short and concise. Add a summary to the documentation.
                
                You are encouraged to build the documentation throughout each step of this series of tutorials. This will give you a better understanding of how the changes affect the documentation.
                
                > Tip: You can copy and paste the documentation from the source code on the right-hand side.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-02.swift) {
                    @Image(source: 01-writing-documentation-02-01.png, alt: "Screenshot of the documentation of BuddyRenderer with the summary highlighted.")
                }
            }
            
            @Step {
                Add an overview to the type.
                
                Lines following the summary is treated as the description. The overview can be long and detailed.
                
                > Tip: Notice that the overview contains backticks. The overview is written in Markdown and can contain code, links, images, tables, and lists. We will have a closer look at some of these later.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-03.swift) {
                    @Image(source: 01-writing-documentation-02-02.png, alt: "Screenshot of the documentation of BuddyRenderer with the overview highlighted.")
                }
            }
            
            @Step {
                Replace \`Buddy\` with \`\`Buddy\`\` and \`render(\_:)\` with \`\`render(\_:)\`\`. This will turn the type and function into links.
                
                > Info: Double backticks (``) are used to refer to a symbol in the documentation. You can also use the alternative syntax `<doc:Buddy>`.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-04.swift) {
                    @Image(source: 01-writing-documentation-02-03.png, alt: "Screenshot of the documentation of BuddyRenderer with the overview highlighted.")
                }
            }
            
            @Step {
                Add a code snippet showing users how to get started with the `BuddyRenderer`.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-05.swift) {
                    @Image(source: 01-writing-documentation-02-04.png, alt: "Screenshot of the documentation of BuddyRenderer with code snippet highlighted.")
                }
            }
            
            @Step {
                Add a summary and a description to the two instance properties.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-06.swift) {
                    @Image(source: 01-writing-documentation-02-05.png, alt: "Screenshot of the documentation of BuddyRenderer with the summary for the two instance properties highlighted.")
                }
            }
            
            @Step {
                Place the cursor on top of the initializer. Then select Editor > Structure > Add Documentation. This will generate template documentation for the function.
                
                > Tip: You can also press ⌥⌘/ to add documentation. 
                
                @Image(source: 01-writing-documentation-02-06.png, alt: "Screenshot of the menu bar showing the Editor, Structure, and Add Documentation menu items highlighted,.")
            }
            
            @Step {
                After generating the documentation, you should be able to select the placeholders and fill out the summary and description of the parameters. See the next step for suggested texts.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-07.swift) {
                    @Image(source: 01-writing-documentation-02-07.png, alt: "Screenshot of the menu bar showing the Editor, Structure, and Add Documentation menu items highlighted,.")
                }
            }
            
            @Step {
                Document the initializer by adding a summary and a description of the parameters.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-08.swift) {
                    @Image(source: 01-writing-documentation-02-08.png, alt: "Screenshot of the documentation of BuddyRenderer with the summary for the initializer highlighted.")
                }
            }
        
            @Step {
                Add documentation to the `render(_:)` function.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-09.swift) {
                    @Image(source: 01-writing-documentation-02-09.png, alt: "Screenshot of the documentation of the render-function on BuddyRenderer.")
                }
            }
            
            @Step {
                Finally, build the documentation and browse the documentation for `BuddyRenderer`.
                
                > Tip: Checkout the `step-3` branch and build the documentation to view the documentation for all symbols.
                
                @Image(source: 01-writing-documentation-02-10.png, alt: "Screenshot of the documentation of BuddyRenderer.")
            }
        }
    }
    
    @Section(title: "Add an image") {
        @ContentAndMedia {
            We will add an image to the documentation of `BuddyRenderer` to give adopters of the framework an idea of the output they can expect when calling `-render(_:)`.
            
            Images used in the documentation are stored inside a documentation catalog. The catalog is also used when enriching documentation in other wasy, such as when adding a landing page, structure, tutorials, and more.
            
            We will look into other ways of enriching the documentation later in the tutorial but for now we will use the documentation catalog to store our image.
        }
        
        @Steps {
            @Step {
                Checkout the `step-3` branch in the Git repository.
                
                @Image(source: tutorial-git-step-3.png, alt: "Screenshot of Terminal showing the step-3 branch being checked out.")
            }

            @Step {
                Start by adding the documentation catalog by right-clicking BuildABuddyKit in the Project navigator and selecting New File...
                
                @Image(source: 01-writing-documentation-03-01.png, alt: "Screenshot of the Project navigator in Xcode showing BuildABuddyKit is right-clicked and with the New File... menu item highlighted.")
            }
            
            @Step {
                Choose Documentation Catalog in the Template picker and select Next.
                
                @Image(source: 01-writing-documentation-03-02.png, alt: "Screenshot of the Template picker in Xcode showing Documentation Catalog and the Next button as highlighted.")
            }
            
            @Step {
                You should see three new items in the Project navigator. There is the Documentation catalog which contains `Documentation.md` and a folder named `Resources`. We will store our images in the `Resources` folder.
                
                We will have a closer look at the `Documentation.md` file in the <doc:Adding-Structure-to-Documentation> tutorial.
                
                @Image(source: 01-writing-documentation-03-03.png, alt: "Screenshot of the Project navigator in Xcode with the Documentation catalog and the files in it highlighted.")
            }
            
            @Step {
                Download [buddyrenderer-output-example.jpeg](https://github.com/simonbs/BuildABuddyKit/blob/main/Sources/BuildABuddyKit/Documentation.docc/Resources/buddyrenderer-output-example.jpeg) and [buddyrenderer-output-example~dark.jpeg](https://github.com/simonbs/BuildABuddyKit/blob/main/Sources/BuildABuddyKit/Documentation.docc/Resources/buddyrenderer-output-example%7Edark.jpeg). 
                
                These are the two images that we will add to the documentation. There is one image to be used in light mode and one to be used in dark mode.
                
                > Info: Filenames of images that are intended for dark mode should be suffixed with `~dark`, for example `xyz~dark.png`.
                
                @Image(source: 01-writing-documentation-03-04.png, alt: "Screenshot Safari with github.com open and showing one of the images. The Download button on the website is highlighted.")
            }
            
            @Step {
                Drag the two downloaded images into the `Resources` folder in Xcode.
                
                @Image(source: 01-writing-documentation-03-05.png, alt: "Screenshot of Xcode showing the images being dragged into the Resources folder.")
            }
            
            @Step {
                Select `BuddyRenderer.swift` in the Project navigator.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-02-09.swift)
            }
            
            @Step {
                Add a short text informing users what the image depicts.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-03-01.swift) {
                    @Image(source: 01-writing-documentation-03-06.png, alt: "Screenshot of the Developer Documentation showing the documentation of BuddyRenderer.")
                }
            }
            
            @Step {
                Add the image using Markdown syntax.
                
                > Info: Notice that we are not explicitly specifying the image to be used in dark mode. DocC will automatically chose whether to use the light or dark variant based on the naming scheme.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-03-02.swift) {
                    @Image(source: 01-writing-documentation-03-07.png, alt: "Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the image of the character.")
                }
            }
            
            @Step {
                Finally, build the documentation to view the image in the `BuddyRenderer` type.
                
                > Tip: Checkout the `step-4` branch and build the documentation. Notice that the documentation now contains images for several types. For example, the documentation of each case in the `Shirt.Front.Style` enum shows a preview of the shirt style.
                
                @Image(source: 01-writing-documentation-03-08.png, alt: "Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the image of the character.")
            }
        }
    }
        
    @Section(title: "Add an aside") {
        Asides are used to get a reader's attention and provide additional advice or warn about common errors and requisities.
        
        In this section we will use asides to provide additional information about the usage of `BuddyRenderer`.
        
        @Steps {
            @Step {
                Checkout the `step-4` branch in the Git repository.
                
                @Image(source: tutorial-git-step-4.png, alt: "Screenshot of Terminal showing the step-4 branch being checked out.")
            }

            @Step {
                Select `BuddyRenderer.swift` in the Project navigator.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-04-00.swift)
            }
            
            @Step {
                Add an aside of type `Note` to inform users about the default canvas size used by `BuddyRenderer` and the benefits of using the default size.
                
                Asides are created by starting a line with a greater-than symbol (`>`) followed by a space, the type of the aside, a colon (`:`), and the content of the aside. Valid types of asides are `Note`, `Important`, `Warning`, `Tip`, and `Experiment`. Each type are stylized uniquely.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-04-01.swift) {
                    @Image(source: 01-writing-documentation-04-01.png, alt: "Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the note highlighted.")
                }
            }
            
            @Step {
                Add an aside of type `Warning` to warn users that creating a canvas with a negative size has undefined behavior.
                
                @Code(name: "BuddyRenderer.swift", file: 01-writing-documentation-04-02.swift) {
                    @Image(source: 01-writing-documentation-04-02.png, alt: "Screenshot of the Developer Documentation showing the documentation of BuddyRenderer with the warning highlighted.")
                }
            }
            
            @Step {
                Finally, build the documentation to view the asides in the `BuddyRenderer` type.

                @Image(source: 01-writing-documentation-04-03.png, alt: "Screenshot of the Developer Documentation showing the documentation of BuddyRenderer.")
            }
        }
    }
    
    @Assessments {
        @MultipleChoice {
            How can you build and view the DocC documentation from Xcode?
            
            @Choice(isCorrect: false) {
                Selecting View > Documentation in the menu bar.
                
                @Justification(reaction: "Try again!") {
                    Sorry, that is not correct.
                }
            }
            
            @Choice(isCorrect: false) {
                Selecting Editor > View Documentation in the menu bar.
                
                @Justification(reaction: "Try again!") {
                    Oops, that is not correct.
                }
            }
            
            @Choice(isCorrect: true) {
                Selecting Product > Build Documentation in the menu bar.
                
                @Justification(reaction: "Correct!") {
                    Correct! You can also press ⌃⇧⌘D to build the documentation.
                }
            }
        }
        
        @MultipleChoice {
            Which language do we use to write documentation when using DocC?
            
            @Choice(isCorrect: true) {
                Markdown
                
                @Justification(reaction: "Correct!") {
                    That's correct! We use a custom dialect of Markdown which includes features like symbol linking, asides, and much more.
                }
            }
            
            @Choice(isCorrect: false) {
                HTML
                
                @Justification(reaction: "Try again!") {
                    Oops, that is not correct.
                }
            }
            
            @Choice(isCorrect: false) {
                Swift
                
                @Justification(reaction: "Try again!") {
                    Sorry, that is not correct.
                }
            }
        }
        
        @MultipleChoice {
            Can documentation of symbols contain syntax highlighted Swift code?
            
            @Choice(isCorrect: true) {
                Yes, it can!
                
                @Justification(reaction: "Correct!") {
                    Correct! DocC documentation can contain syntax highlighted Swift code and it is a great way to get people quickly started using your types.
                }
            }
            
            @Choice(isCorrect: false) {
                No, it cannot and that's a bummer.
                
                @Justification(reaction: "Try again!") {
                    Sorry, that is not correct. Hint: The other option is correct 🙊
                }
            }
        }
        
        @MultipleChoice {
            Which of the following syntaxes can we use linking to the documentaton of the `BuddyRenderer` type?
            
            @Choice(isCorrect: false) {
                \`BuddyRenderer\`
                
                @Justification(reaction: "Try again!") {
                    Unfortunately, that was not correct.
                }
            }
            
            @Choice(isCorrect: true) {
                \`\`BuddyRenderer\`\`
                
                @Justification(reaction: "Correct!") {
                    That's correct! We can also use `<doc:BuddyRenderer>` to link to a symbol.
                }
            }
            
            @Choice(isCorrect: false) {
                \>BuddyRenderer\<
                
                @Justification(reaction: "Try again!") {
                    Sorry, that is not correct.
                }
            }
        }
        
        @MultipleChoice {
            Which of the following is a correct filename for an image that is used in dark mode?
            
            @Choice(isCorrect: false) {
                hero@dark.png
                
                @Justification(reaction: "Try again!") {
                    Unfortunately, that was not correct.
                }
            }
            
            @Choice(isCorrect: false) {
                hero-dark.png
                
                @Justification(reaction: "Try again!") {
                    Ouch! That was not correct.
                }
            }
            
            @Choice(isCorrect: true) {
                hero~dark.png
                
                @Justification(reaction: "Correct!") {
                    Correct! DocC will automatically use images suffixed with `~dark` whemn viewing the documentation in darkmode.
                }
            }
        }
        
        @MultipleChoice {
            Which of these is the correct syntax to use when adding an aside?
            
            @Choice(isCorrect: false) {
                `! Warning: Build a Buddy is highly addictive.`
                
                @Justification(reaction: "Try again!") {
                    Unfortunately, that was not correct.
                }
            }
            
            @Choice(isCorrect: true) {
                `> Warning: Build a Buddy is highly addictive.`
                
                @Justification(reaction: "Correct!") {
                    That's correct! An aside is created by typing a greater-than symbol (`>`) followed by a space, the type of the aside, a colon (`:`), and the content of the aside.
                }
            }
            
            @Choice(isCorrect: false) {
                `[Warning: Build a Buddy is highly addictive.]`
                
                @Justification(reaction: "Try again!") {
                    Sorry, that is not correct.
                }
            }
        }
        
        @MultipleChoice {
            Which types of asides provide a unique style when creting an aside?
            
            @Choice(isCorrect: false) {
                Note, Important, Alert, Help, and Experiment.
                
                @Justification(reaction: "Try again!") {
                    Unfortunately, that was not correct.
                }
            }
            
            @Choice(isCorrect: false) {
                Notice, Important, Warning, Hint, and Experiment.
                
                @Justification(reaction: "Try again!") {
                    Oops, that is not correct.
                }
            }
            
            @Choice(isCorrect: true) {
                Note, Important, Warning, Tip, and Experiment.
                
                @Justification(reaction: "Correct!") {
                    That's correct! You can create asides of any type but other types than those listed here will fallback to the appearance of the Note type.
                }
            }
        }
    }
}
